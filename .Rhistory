install.packages("GISTools")
library(GISTools)
data(georgia)
appling <- georgia.polys[[1]]
georgia.polys[[1]]
plot(appling, asp = 1, type = "n", xlab = "Easting", ylab = "Northing")
polygon(appling, density = 14, angle = 135)
?polygon
mat = SpatialPixelsDataFrame(points = meuse.grid[c("x", "y")], data = meuse.grid)
data(meuse.grid)
mat = SpatialPixelsDataFrame(points = meuse.grid[c("x", "y")], data = meuse.grid)
par(mfrow = c(1, 2))
par(mar = c(0, 0, 0, 0))
image(mat, "dist")
library(RColorBrewer)
image(mat, "dist", col = greenpal)
image(mat, "dist", col = "greenpal")
?RColorBrewer
greenpal <- brewer.pal(7, "Greens")
image(mat, "dist", col = greenpal)
image(mat, "dist")
image(mat, "dist", col = greenpal)
head(meuse.grid)
contour(mat, "dist")
data(newhaven)
ls()
data(newhaven)
ls()
plot(roads)
plot(roads)
class(roads)
class(blocks)
class(tracts)
class(breach)
head(blocks)
head(data.frame(blocks))
head(breach)
plot(blocks)
plot(roads)
plot(blocks)
plot(roads, add = T, col = "red")
plot(breach, add = T, col = "blue")
map.scale(534750, miles2ft(2), "Miles", 4, 0.5)
map.scale(534750, 152000, miles2ft(2), "Miles", 4, 0.5)
map.scale(534750, 152000, miles2ft(2), "Miles", 4, 0.5)
north.arrow(534750, 154000, miles2ft(0.25), col = "lightgreen")
north.arrow(534750, 155000, miles2ft(0.25), col = "lightgreen")
north.arrow(534750, 156000, miles2ft(0.25), col = "lightgreen")
north.arrow(534750, 159000, miles2ft(0.25), col = "lightgreen")
plot(blocks)
plot(roads, add = T, col = "red")
plot(breach, add = T, col = "blue")
map.scale(534750, 152000, miles2ft(2), "Miles", 4, 0.5)
north.arrow(534750, 159000, miles2ft(0.25), col = "lightgreen")
map.scale(534750, 152000, miles2ft(3), "Miles", 4, 0.5)
plot(blocks)
plot(roads, add = T, col = "red")
plot(breach, add = T, col = "blue")
map.scale(534750, 152000, miles2ft(3), "Miles", 4, 0.5)
north.arrow(534750, 159000, miles2ft(0.25), col = "lightgreen")
plot(blocks)
plot(roads, add = T, col = "red")
plot(breach, add = T, col = "blue")
map.scale(534750, 152000, miles2ft(3), "Miles", 6, 0.5)
north.arrow(534750, 159000, miles2ft(0.25), col = "lightgreen")
# Calculate mean BA by state and nationwide
# Total BA by state
# Best way to plot multiple raster files
# Database linking file name to species name
db <- read.csv("data/summary_table_all.csv")
input <- 802
test <- raster(paste("data/s", input, ".img"))
library(raster)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(ggthemes)
PlotUSA <- function(raster) {
plot(raster)
plot(contig.usa, add = T)
}
test <- raster(paste("data/s", input, ".img"))
paste("data/s", input, ".img"
)
?paste
test <- raster(paste("data/s", input, ".img"), collapse = T)
test <- raster(paste("data/s", input, ".img", collapse = T))
test <- raster(paste("data/s", input, ".img", collapse = 0))
paste("data/s", input, ".img", collapse = 0)
paste("data/s", input, ".img", collapse = T)
paste("data/s", input, ".img", collapse = 1)
paste("data/s", input, ".img", collapse = "")
paste("data/s", input, ".img", collapse = ",")
paste0("data/s", input, ".img")
test <- raster(paste0("data/s", input, ".img"))
head(db)
db[db$Common.name == "white oak"]
db[db$Common.name == "white oak", ]
# Summary data
test <- white.oak
usa <- readOGR("data/shapefiles", "states") # get usa shapefile
white.oak <- raster("data/s802.img")
red.oak <- raster("data/s833.img")
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
contig.usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
library(raster)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(ggthemes)
PlotUSA <- function(raster) {
plot(raster)
plot(contig.usa, add = T)
}
# Summary data
test <- white.oak
test[test == 0] <- NA # Converts 0 to NA
### Use cellStats to return a single value for analyzing raster data
# Depending on which version of the dataset I use, get different mean values...
cellStats(white.oak, stat = "mean")
cellStates(white.oak[white.oak != 0], stat = "mean")
cellStats(white.oak[white.oak != 0], stat = "mean")
?cellStats
cellStats(test, stat = "mean")
cell.Stats(test, stat="weighted.mean")
cellStats(test, stat="weighted.mean")
head(getValues(test))
cellStats white.oak, stat = "sum")
cellStats(white.oak, stat = "sum")
non.zero <- getValues(white.oak)
sum(non.zero > 0)
# Another attempt to get mean to match what it is in summary
sum <- cellStats(white.oak, stat = "sum")
sum/count
count <- sum(non.zero > 0)
sum/count
white.oak
cellStats(test, stat = "mean")
PlotUSA(white.oak)
wisconsin <- subset(usa, STATE_name == "Wisconsin")
wisconsin <- subset(usa, STATE_NAME == "Wisconsin")
plot(wisconsin)
plot(white.oak, add = T)
plot(wisconsin, add = T)
test <- mask(white.oak, wisconsin)
plot(test)
wisconsin
contig.usa
test
white.oak
test <- mask(crop(white.oak, extent(wisconsin)), wisconsin)
plot(test)
mn.wi <- subset(usa, STATE_NAME == "Wisconsin" | STATE_NAME = "Minnesota")
mn.wi <- subset(usa, STATE_NAME == "Wisconsin" | STATE_NAME == "Minnesota")
plot(wi.white.oak)
plot(mn.wi, add = T)
plot(wi.white.oak)
plot(wisconsin, add = T)
mn.wi.white.oak <- mask(crop(white.oak, extent(mn.wi)), mn.wi)
plot(wi.white.oak)
wi.white.oak <- mask(crop(white.oak, extent(wisconsin)), wisconsin)
plot(wi.white.oak)
plot(wisconsin, add = T)
mn.wi.white.oak <- mask(crop(white.oak, extent(mn.wi)), mn.wi)
plot(wi.white.oak)
plot(mn.wi, add = T)
plot(mn.wi.white.oak)
plot(mn.wi, add = T)
### Calculate mean BA by state and nationwide
avg.wi.white.oak <- cellStates(wi.white.oak, stat = "mean")
### Calculate mean BA by state and nationwide
avg.wi.white.oak <- cellStats(wi.white.oak, stat = "mean")
avg.wi.white.oak
### Calculate mean BA by state and nationwide
test <- wi.white.oak[wi.white.oak != 0]
avg.wi.white.oak <- cellStats(test, stat = "mean")
### Calculate mean BA by state and nationwide
test <- wi.white.oak
test[test == 0] <- NA
avg.wi.white.oak <- cellStats(test, stat = "mean")
avg.wi.white.oak
wi.white.oak
plot(wi.white.oak, pixels = 10000)
plot(wi.white.oak, maxpixels = 10000)
plot(wisconsin, add = T)
warnings()
plot(wi.white.oak, maxpixels = 10000)
plot(wisconsin, add = T)
plot(wi.white.oak, maxpixels = 1000)
plot(wisconsin, add = T)
plot(wi.white.oak, maxpixels = 10)
plot(wisconsin, add = T)
library(raster)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(ggthemes)
PlotUSA <- function(raster) {
plot(raster)
plot(contig.usa, add = T)
}
usa <- readOGR("data/shapefiles", "states") # get usa shapefile
white.oak <- raster("data/s802.img")
red.oak <- raster("data/s833.img")
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
contig.usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
wisconsin <- subset(usa, STATE_NAME == "Wisconsin")
mn.wi <- subset(usa, STATE_NAME == "Wisconsin" | STATE_NAME == "Minnesota")
# Clipping to states
wi.white.oak <- mask(crop(white.oak, extent(wisconsin)), wisconsin)
### Total BA by state
cellStats(wi.white.oak, stat = "sum")
### Total BA by state
cellStates(white.oak, stat = "sum")
### Total BA by state
cellStats(white.oak, stat = "sum")
### Database linking file name to species name
db <- read.csv("data/summary_table_all.csv")
### Database linking file name to species name
db <- read.csv("data/summary_table_all.csv")
# Get db with species codes
db <- read.csv("data/summary_table_all.csv")
# Get db with species codes
db <- read.csv("data/summary_table_all.csv")
library(raster)
genera <- unique(db$genus_name)
genera
id <- db$spp_code
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
file.list
?grep
grep(id, file.list)
pmatch(id, file.list)
?pattern
grep(paste("^", id, ".$"))
grep(paste("^", id, ".$"), file.list)
grep(paste0("^", id, ".$"), file.list)
paste0("^", id, ".$")
grep(paste0("^", id, ".*$"), file.list)
grep(paste(id), file.list, value = T)
id
grep(paste0(id), file.list, value = T)
for(i in id){
grep(i, file.list, value = T)
}
for(i in id){
return(grep(i, file.list, value = T))
}
i
for(i in unique(id){
for(i in unique(id)){
return(grep(id[i], file.list, value = T))
}
for(i in id){
return(grep(id[i], file.list, value = T))
}
for(i in id){
grep(id[i], file.list, value = T)
}
for(i in 1:length(id)){
grep(id[i], file.list, value = T)
}
return(grep(id[i], file.list, value = T))
grep(paste0(id), file.list, value = T)
grep(id, file.list, value = T)
strsplit(file.list, "s")
strsplit(file.list, c("s", ".")
)
library(dplyr)
detach(dplyr)
library(raster)
detach("dplyr")
detach(package:dplyr)
split1 <- strsplit(file.list, "s")
split2 <- strsplit(split1, ".")
split1
split1 <- unlist(strsplit(file.list, "s"))
split1 <- split1[seq(2, nrow(split1), 2)]
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
split2 <- strsplit(split1, ".")
split2 <- unlist(strsplit(split1, "."))
split2 <- unlist(strsplit(split1, "\."))
?strsplit
split2 <- unlist(strsplit(split1, "[.]"))
split2 <- split2[seq(from = 1, to = length(split2), by = 2)]
which(!(as.character(id) %in% split2)
)
which((as.character(id) %in% split2))
v <- which((as.character(id) %in% split2))
split2[-v]
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
file.list
id
# Get db with species codes
# As a note, I manually removed id 299, 915, 998, and 999 because
# they're for dead trees
db <- read.csv("data/summary_table_all.csv")
genera <- unique(db$genus_name)
id <- db$spp_code
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
file.list
pine.id <- db$id[genera == "Pinus"]
pine.id
head(db)
pine.id <- db$id[db$genus_name == "Pinus"]
pine.id
pine.id <- db$spp_code[db$genus_name == "Pinus"]
pine.id
pine.id <- db$spp_code[db$genus_name == "Picea"]
fir.id <- db$spp_code[db$genus_name == "Picea"]
which(fir.id %in% split2)
split2[1]
which(as.character(fir.id) == split2)
which(as.character(fir.id) %inn% split2)
which(as.character(fir.id) %in% split2)
grep(fir.id, split2)
split2[187]
grep(fir.id, split2, value = T)
?grep
grep(fir.id, split2, value = T, fixed = T)
t <- as.character(fir.id)
which(t %in% split2)
split2[split2 == t]
split2[which(split2 %in% t)]
split2[which(t %in% split2)]
?which
split2 == t
grep(paste(t, collapse = "|"), file.list)
db$id <- paste0("s", db$spp_code)
db$id
id <- db$id
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
split1 <- unlist(strsplit(file.list, "/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
split2 <- unlist(strsplit(split1, "[.]"))
split2 <- split2[seq(from = 1, to = length(split2), by = 2)]
fir.id <- db$id[db$genus_name == "Picea"]
t <- as.character(fir.id)
grep(paste(t, collapse = "|"), file.list)
which(t %in% split2)
t
split2[1]
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
split1 <- unlist(strsplit(file.list, "/"))
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
split2 <- unlist(strsplit(split1, "[.]"))
split2 <- split2[seq(from = 1, to = length(split2), by = 2)]
which(t %in% split2)
fir.id <- db$id[db$genus_name == "Picea"]
t <- as.character(fir.id)
which(t %in% split2)
split2[which(t %in% split2)]
grep(paste(t, collapse = "|"), file.list)
grep(paste(t, collapse = "|"), split2)
split2[274]
split2[310]
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
split2 <- unlist(strsplit(split1, "img"))
fir.id <- db$id[db$genus_name == "Picea"]
t <- as.character(fir.id)
which(t %in% split2)
split2[which(t %in% split2)]
grep(paste(t, collapse = "|"), split2)
split2 <- unlist(strsplit(split1, "img"))
db$id <- paste0("s", db$spp_code, ".")
genera <- unique(db$genus_name)
id <- db$id
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
split2 <- unlist(strsplit(split1, "img"))
v <- which((as.character(id) %in% split2))
split[-v]
fir.id <- db$id[db$genus_name == "Picea"]
t <- as.character(fir.id)
which(t %in% split2)
split2[which(t %in% split2)]
grep(paste(t, collapse = "|"), split2)
t
split2
grep(paste(t, collapse = "|"), split2)
split2[313]
db$id <- paste0("s", db$spp_code, ".img")
genera <- unique(db$genus_name)
id <- db$id
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
grep(paste(t, collapse = "|"), split1)
fir.id <- db$id[db$genus_name == "Picea"]
t <- as.character(fir.id)
which(t %in% split2)
split2[which(t %in% split2)]
grep(paste(t, collapse = "|"), split1)
b <- grep(paste(t, collapse = "|"), split1)
split1[b]
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
fir.id <- db$id[db$genus_name == "Picea"]
fir.id <- as.character(fir.id)
which(fir.id %in% split2)
split2[which(fir.id %in% split2)]
index <- grep(paste(t, collapse = "|"), split1)
index
file.list[index]
raster <- raster(file.list)
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
rasters <- lapply(file.list[index], raster)
rasters <- lapply(file.list[index], brick)
rasters <- lapply(file.list[index], brick)
test <-  merge(rasters)
rasters <- lapply(file.list[index], raster)
test <-  merge(rasters)
rasters <- lapply(file.list[index], raster)
raster[[1]]
rasters[[1]]
library(raster)
test <-  merge(rasters)
test <-  do.call(merge, rasters)
plot(test)
file.list[index]
f1 <- raster("data/s90.img")
f2 <- raster("data/s91.img")
f3 <- raster("data/s93.img")
f4 <- raster("data/s94.img")
f5 <- raster("data/s95.img")
f6 <- raster("data/s96.img")
f7 <- raster("data/s97.img")
f8 <- raster("data/s98.img")
plot(f1)
plot(f2)
rasters <- rasters[[2:8]]
rasters <- rasters[2:8]
test <-  do.call(merge, rasters)
plot(test)
?unlist
test2 <- unlist(test)
rm(test)
test2 <- unlist(rasters)
plot(test2)
test <-  do.call(merge, rasters)
rm(test)
test <-  do.call(merge, rasters)
plot(test)
rm(test2)
plot(test)
plot(f2)
