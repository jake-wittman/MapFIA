z = NA)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
sum.ba <- foreach (i = states, .combine = rbind)  %dopar% {
res <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
c(names(rasterfile), states, res)
}
return(sum.ba)
}
registerDoParallel(detectCores() - 1)
test <- lapply(raster.subset, StateStatsParallel)
library(raster)
test <- lapply(raster.subset, StateStatsParallel)
?foreach
StateStatsParallel <- function(rasterfile) {
sum.ba <- data.frame(x = rep(names(rasterfile), length(states)),
y = states,
z = NA)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
sum.ba <- foreach (i = states, .combine = rbind, .packages = "raster")  %dopar% {
res <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
c(names(rasterfile), states, res)
}
return(sum.ba)
}
registerDoParallel(detectCores() - 1)
test <- lapply(raster.subset, StateStatsParallel)
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
return(sum.ba)
}
b <- list.rasters[1]
test <- lapply(states, function(x) {cellStats(mask(crop(b, extent(x)),
x), stat = "sum")})
StatesFun <- function(list.states) {
cellStats(mask(crop(rasterfile, extent(list.states),
list.states), stat = "sum"))
}
StatesFun(state.shapes)
StatesFun <- function(list.states) {
cellStats(mask(crop(b, extent(list.states),
list.states), stat = "sum"))
}
StatesFun(state.shapes)
?write.csv
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
tot.ba <- lapply(raster.subset, StateStats)
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
states <- as.character(unique(contig.usa$STATE_NAME))
# Make a list of state shape files
state.shapes <-
lapply(states, function(x) {
subset(contig.usa, STATE_NAME == x)
})
names(state.shapes) <- states
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
library(plyr)
library(doParallel)
library(raster)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(ggthemes)
PlotUSA <- function(raster) {
plot(raster)
plot(contig.usa, add = T)
}
usa <- readOGR("data/shapefiles", "states") # get usa shapefile
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
contig.usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
states <- as.character(unique(contig.usa$STATE_NAME))
### Total BA by state - will want to get a script running and let this calculate on its own
# then create a csv for it.
db <- read.csv("data/summary_table_all.csv")
db$id <- paste0("s", db$spp_code, ".img")
genera <- unique(db$genus_name)
spp.id <- db$spp_code
spp.id <- paste0("s", spp.id)
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
# The combined spp files are not done yet, so remove them from file list
spp.id <- as.character(spp.id)
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
index <- grep(paste(spp.id, collapse = "|"), split1)
file.list[index]
list.rasters <- lapply(file.list[index], raster)
list.rasters <- list.rasters[324:1]
list.rasters[[1]]
# Make a list of state shape files
state.shapes <-
lapply(states, function(x) {
subset(contig.usa, STATE_NAME == x)
})
names(state.shapes) <- states
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
tot.ba <- lapply(list.rasters, StateStats)
library(raster)
library(rgdal)
library(ggplot2)
library(googledrive)
library(shiny)
runApp('MapFIA')
sort(states)
runApp('MapFIA')
runApp('MapFIA')
db <- read.csv("data/summary_table_all.csv")
usa <- readOGR("data/shapefiles", "states")
usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
states <- as.character(unique(contig.usa$STATE_NAME))
states <- as.character(unique(usa$STATE_NAME))
sort(states)
states <- sort(as.character(unique(usa$STATE_NAME)))
runApp('MapFIA')
# NOTE: Need to add regions based on this map (http://www.pathwaystoscience.org/IBPImages/maps/smallusa.gif)
states <- c(states, "Northeast", "Mid-Atlantic", "Midwest", "Southeast",
"Southwest", "Mountain West", "Pacific West")
runApp('MapFIA')
runApp('MapFIA')
shiny::runApp('MapFIA')
runApp('MapFIA')
test <- "Northeast"
test %in% "Northeast"
"Northeast" %in% test
test <- c("Northeast", "Oregon")
test %in% "Northeast"
runApp('MapFIA')
"Northeast" %in% test
runApp('MapFIA')
runApp('MapFIA')
input$map <- c("Pacific West", "Iowa")
input <- data.frame()
input$map <- c("Pacific West", "Iowa")
input <- as.data.frame()
input <- as.data.frame(NA)
input$map <- c("Pacific West", "Iowa")
input <- as.data.frame(NA, NA)
input <- as.data.frame(c(NA, NA))
input <- as.data.frame(NA, NA)
input <- as.data.frame(c(NA, NA))
input$map <- c("Pacific West", "Iowa")
input$map
input$map[-"Pacific West"]
input$map[!input$map %in% "Pacific West"]
runApp('MapFIA')
db <- read.csv("data/summary_table_all.csv")
usa <- readOGR("data/shapefiles", "states")
usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
states <- sort(as.character(unique(usa$STATE_NAME)))
states <- c(states, "Northeast", "Mid-Atlantic", "Midwest", "Southeast",
"Southwest", "Mountain West", "Pacific West")
db
head(db)
test <- read.csv("data/s802states_tot_ba.csv")
head(test)
db[db$spp_code == 802,]
tot.ba
tot.ba.file.path <- list.files(path = "./data/", pattern = "states_tot_ba.csv", full.names = T) # get full file names
tot.ba.list <- lapply(tot.ba.file.path, read.csv)
tot.ba.list[[1]]
list.id <- tot.ba.file.path %>% # extract trial numbers with this pipeline
basename() %>%
strsplit(split = "_")
list.id
list.id <- unlist(list.id[T, F, F])
list.id <- unlist(list.id[T, F])
list.id <- unlist(list.id)[T, F]
list.id <- unlist(list.id)[c(T, F)]
list.id
list.id <- tot.ba.file.path %>% # extract trial numbers with this pipeline
basename() %>%
strsplit(split = "_")
list.id
list.id <- unlist(list.id)[c(T, F, F)]
list.id
?basename
list.id <- list.id %>%
strsplit(split = "st")
list.id
list.id <- tot.ba.file.path %>% # extract trial numbers with this pipeline
basename() %>%
strsplit(split = "st")
list.id
list.id <- unlist(list.id)[c(T, F)]
list.id
names(tot.ba.list) <- list.id
tot.ba.list["s802"]
db
head(db)
head(db)
db$spp_code <- paste0("s", db$spp_code)
head(db)
write.csv("MapFIA/data/summary_table_all.csv")
write.csv(db, "MapFIA/data/summary_table_all.csv")
db
head(db)
input$scientific_name <- c("Abies amabilis", "Abies balsamea")
id <- db[db$scientific_name %in% input$scientific.name, spp_code]
id <- db[db$scientific_name %in% input$scientific.name, "spp_code"]
id
db$scientific_name %in% input$scientific.name
id <- db[input$scientific.name %in% db$scientific_name, "spp_code"]
id
input$scientific.name %in% db$scientific_name
input$scientific_name
input$scientific.name == db$scientific_name
id <- db$spp_code[input$scientific.name %in% db$scientific_name]
id
db$spp_code[input$scientific.name %in% db$scientific_name]
input$scientific.name %in% db$scientific_name
input$scientific_name
db$scientific_name
str(input$scientific_name
)
str(input$scientific_name)
str(input$scientific.name)
id <- db$spp_code[input$scientific_name %in% db$scientific_name]
id <- db$spp_code[input$scientific_name %in% db$scientific_name]
id
input$scientific_name %in% db$scientific_name
input$scientific.name <- input$scientific_name
id <- db$spp_code[input$scientific.name %in% db$scientific_name]
id
which(input$scientific.name %in% db$scientific_name)
db
head(db)
input$scientific.name %in% db$scientific_name
db$scientific_name %in% input$scientific.name
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
id
head(db)
input$shapefiles <- c("Oregon", "New York")
regions <- input$shapefiles
tot.ba.list[id]
tot.ba <- unlist(tot.ba.list[id])
tot.ba
c(tot.ba.list[id])
unlist(tot.ba.list[1])
unlist(tot.ba.list[[1]])
tot.ba <- do.call(rbind(tot.ba.list[id]))
tot.ba <- do.call("rbind", tot.ba.list[id]))
tot.ba <- do.call("rbind", tot.ba.list[id])
tot.ba
install.packages(data.table)
install.packages("data.table")
?rbindlist
library(data.table)
?rbindlist
tot.ba <- rbindlist(tot.ba.list)
head(tot.ba)
tot.ba <- rbindlist(tot.ba.list, idcol = "tot.ba.list")
head(tot.ba)
tot.ba <- rbindlist(tot.ba.list)
tot.ba
sub.tot.ba <- tot.ba[spp.id == id, state = regions]
sub.tot.ba <- tot.ba[spp.id == id & state = regions]
sub.tot.ba <- tot.ba[spp.id == id & state == regions]
sub.tot.ba
regions
sub.tot.ba <- tot.ba[spp.id == id && state == regions]
sub.tot.ba
sub.tot.ba <- tot.ba[spp.id == id | state == regions]
sub.tot.ba
sub.tot.ba <- tot.ba[spp.id == id & state == regions]
sub.tot.ba <- tot.ba[spp.id == id][state == regions]
sub.tot.ba <- tot.ba[spp.id %in% id & state == regions]
sub.tot.ba
db[db$spp_code == 803]
db[db$spp_code == 803,]
db
head(db)
db[db$spp_code == "s803", ]
db[db$spp_code == "s802", ]
db[db$spp_code == "s804", ]
db[db$spp_code == "s801", ]
db[db$spp_code == "s805", ]
db[db$scientific_name == "Quercus rubra", ]
input$scientific.name <- c("Quercus rubra", "Quercus alba")
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
id
input$shapefiles <- c("Minnesota", "Wisconsin")
regions <- input$shapefiles
sub.tot.ba <- tot.ba[spp.id %in% id & state == regions]
sub.tot.ba
sub.tot.ba <- tot.ba[spp.id %in% id & state %in% regions]
sub.tot.ba
ggplot(sub.tot.ba, aes(x = state, y = tot.ba)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format())
?percent_format()
library(scales)
ggplot(sub.tot.ba, aes(x = state, y = tot.ba)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format())
ggplot(sub.tot.ba, aes(x = state, y = tot.ba, fill = spp.id)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format())
sum.tot.ba <- sub.tot.ba[, sum(tot.ba), by = state]
sum.tot.ba
sum.tot.ba <- sub.tot.ba[, sum(tot.ba), by = spp.id]
sum.tot.ba
sum.tot.ba <- sub.tot.ba[, sum(tot.ba = tot.ba), by = spp.id]
sum.tot.ba <- sub.tot.ba[, sum(tot.ba = "tot.ba"), by = spp.id]
sum.tot.ba <- sub.tot.ba[, .(sum(tot.ba = "tot.ba")), by = spp.id]
sum.tot.ba <- sub.tot.ba[, .(sum(tot.ba = tot.ba)), by = spp.id]
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba)), by = spp.id]
sum.tot.ba
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba), region = total), by = spp.id]
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba), total = region), by = spp.id]
sub.tot.ba
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba)), by = spp.id][, state := Total, with = F ]
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba)), by = spp.id][, state := "Total", with = F ]
?:=
?':=\'
?':='
sum.tot.ba <- sum.tot.ba[, state := "Total", with = F ]
sum.tot.ba <- sum.tot.ba[, state := "Total"]
sum.tot.ba
View(sum.tot.ba)
sum.tot.ba <- sum.tot.ba[, state := "Total"]
sum.tot.ba
head(sum.tot.ba)
?rbindcalllist
?rbindcall
??rbindcall
?data.table
?rbindlist
subset.tot.ba <- rbindlist(subset.tot.ba, sum.tot.ba)
subset.tot.ba <- tot.ba[spp.id %in% id & state %in% regions]
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba)), by = spp.id]
sum.tot.ba <- sum.tot.ba[, state := "Total"]
subset.tot.ba <- rbindlist(subset.tot.ba, sum.tot.ba)
subset.tot.ba <- rbindlist(subset.tot.ba, sum.tot.ba, use.names = T)
subset.tot.ba <- rbindlist(subset.tot.ba, sum.tot.ba, use.names = T, fill = T)
subset.tot.ba <- rbindlist(subset.tot.ba, sum.tot.ba, use.names = T, fill = T, idcol = F)
subset.tot.ba <- rbindlist(c(subset.tot.ba, sum.tot.ba), use.names = T, fill = T, idcol = F)
str(sub.tot.ba)
str(sum.tot.ba)
l <- list(subset.tot.ba, sum.tot.ba)
subset.tot.ba <- rbindlist(list(subset.tot.ba, sum.tot.ba), use.names = T, fill = T, idcol = F)
subset.tot.ba
ggplot(subset.tot.ba, aes(x = state, y = tot.ba, fill = spp.id)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format())
# Get total basal area for selected region
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba)), by = spp.id][, state := "Total"]
sum.tot.ba
View(sum.tot.ba)
# Get ID for entered spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Get region for entered states
regions <- input$shapefiles
# Get basal area for spp & state combos
subset.tot.ba <- tot.ba[spp.id %in% id & state %in% regions]
# Get total basal area for selected region
sum.tot.ba <- sub.tot.ba[, .(tot.ba = sum(tot.ba)), by = spp.id][, state := "Total"]
#sum.tot.ba <- sum.tot.ba[, state := "Total"]
# Recombine data sets
subset.tot.ba <-rbindlist(
list(subset.tot.ba, sum.tot.ba),
use.names = T,
fill = T,
idcol = F
)
subset.tot.ba
tot.ba
# Get scientific & common names for select spp
sci.name <- db$scientific_name[db$spp_code %in% id]
sci.name
com.name <- db$common[db$spp_code %in% id]
View(tot.ba)
tot.ba
head(tot.ba)
tot.ba
View(tot.ba)
View(subset.tot.ba)
runApp('MapFIA')
runApp('MapFIA')
# NOTE: Maybe need to add something that this is only for the contiguous US?
ui <- fluidPage(
# Application title
titlePanel("Mapping Tree Distributions"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectizeInput("scientific.name",
"Scientific Name of Organism",
choices = db$scientific_name,
multiple = TRUE,
selected = NULL),
selectizeInput("common.name",
"Common Name of Organism",
choices = db$common,
multiple = TRUE,
selected = NULL),
selectInput("shapefiles",
"Geographic Area to Plot",
choices = states,
multiple = TRUE,
selectize = TRUE),
uiOutput("conditional.map.options"),
numericInput("pixels",
"Number of Pixels",
min = 1,
max = 5000000,
value = 30000,
step = 10000),
helpText("Plots with more pixels will take longer to generate"),
actionButton("go", "Generate Map")
),
mainPanel(
#plotOutput(Distribution map goes here)
plotOutput("barchart")
#
)
)
)
runApp('MapFIA')
sci.name
id
tot.ba
head(db)
names(db) <- c("common", "scientific.name", "genus.name", "spp.name", "spp.code", "avg.bab")
# Global data stuff
db <- read.csv("data/summary_table_all.csv")
names(tot.ba) <- c("X", "spp_code", "state", "tot_ba")
tot.ba
