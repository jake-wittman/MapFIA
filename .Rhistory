z = NA)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
sum.ba <- foreach (i = states, .combine = rbind)  %dopar% {
res <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
c(names(rasterfile), states, res)
}
return(sum.ba)
}
registerDoParallel(detectCores() - 1)
test <- lapply(raster.subset, StateStatsParallel)
library(raster)
test <- lapply(raster.subset, StateStatsParallel)
?foreach
StateStatsParallel <- function(rasterfile) {
sum.ba <- data.frame(x = rep(names(rasterfile), length(states)),
y = states,
z = NA)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
sum.ba <- foreach (i = states, .combine = rbind, .packages = "raster")  %dopar% {
res <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
c(names(rasterfile), states, res)
}
return(sum.ba)
}
registerDoParallel(detectCores() - 1)
test <- lapply(raster.subset, StateStatsParallel)
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
return(sum.ba)
}
b <- list.rasters[1]
test <- lapply(states, function(x) {cellStats(mask(crop(b, extent(x)),
x), stat = "sum")})
StatesFun <- function(list.states) {
cellStats(mask(crop(rasterfile, extent(list.states),
list.states), stat = "sum"))
}
StatesFun(state.shapes)
StatesFun <- function(list.states) {
cellStats(mask(crop(b, extent(list.states),
list.states), stat = "sum"))
}
StatesFun(state.shapes)
?write.csv
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
tot.ba <- lapply(raster.subset, StateStats)
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
states <- as.character(unique(contig.usa$STATE_NAME))
# Make a list of state shape files
state.shapes <-
lapply(states, function(x) {
subset(contig.usa, STATE_NAME == x)
})
names(state.shapes) <- states
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
library(plyr)
library(doParallel)
library(raster)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(ggthemes)
PlotUSA <- function(raster) {
plot(raster)
plot(contig.usa, add = T)
}
usa <- readOGR("data/shapefiles", "states") # get usa shapefile
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
contig.usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
states <- as.character(unique(contig.usa$STATE_NAME))
### Total BA by state - will want to get a script running and let this calculate on its own
# then create a csv for it.
db <- read.csv("data/summary_table_all.csv")
db$id <- paste0("s", db$spp_code, ".img")
genera <- unique(db$genus_name)
spp.id <- db$spp_code
spp.id <- paste0("s", spp.id)
file.list <- list.files(path = "./data/", pattern = ".img", full.names = T)
# The combined spp files are not done yet, so remove them from file list
spp.id <- as.character(spp.id)
split1 <- unlist(strsplit(file.list, "a/"))
split1 <- split1[seq(from = 2, to = length(split1), by = 2)]
index <- grep(paste(spp.id, collapse = "|"), split1)
file.list[index]
list.rasters <- lapply(file.list[index], raster)
list.rasters <- list.rasters[324:1]
list.rasters[[1]]
# Make a list of state shape files
state.shapes <-
lapply(states, function(x) {
subset(contig.usa, STATE_NAME == x)
})
names(state.shapes) <- states
StateStats <- function(rasterfile) {
sum.ba <- data.frame(
x = rep(names(rasterfile), length(states)),
y = states,
z = NA
)
colnames(sum.ba) <- c("spp.id", "state", "tot.ba")
print(names(rasterfile))
test <- lapply(states, function(x) {})
for (i in states) {
sum.ba$tot.ba[sum.ba$state == i & sum.ba$spp.id == names(rasterfile)] <-
cellStats(mask(crop(rasterfile, extent(state.shapes[[paste(i)]])),
state.shapes[[paste(i)]]), stat = "sum")
print(i)
}
write.csv(sum.ba, paste0("data/", names(rasterfile), "states_tot_ba.csv"))
return(sum.ba)
}
tot.ba <- lapply(list.rasters, StateStats)
library(raster)
library(rgdal)
library(ggplot2)
library(googledrive)
library(shiny)
runApp('MapFIA')
sort(states)
runApp('MapFIA')
runApp('MapFIA')
db <- read.csv("data/summary_table_all.csv")
usa <- readOGR("data/shapefiles", "states")
usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
states <- as.character(unique(contig.usa$STATE_NAME))
states <- as.character(unique(usa$STATE_NAME))
sort(states)
states <- sort(as.character(unique(usa$STATE_NAME)))
runApp('MapFIA')
# NOTE: Need to add regions based on this map (http://www.pathwaystoscience.org/IBPImages/maps/smallusa.gif)
states <- c(states, "Northeast", "Mid-Atlantic", "Midwest", "Southeast",
"Southwest", "Mountain West", "Pacific West")
runApp('MapFIA')
runApp('MapFIA')
shiny::runApp('MapFIA')
runApp('MapFIA')
