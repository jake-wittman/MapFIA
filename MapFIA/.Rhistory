sci.name <- db$scientific_name[db$spp_code %in% id]
com.name <- db$common[db$spp_code %in% id]
# Get region for entered states
regions <- input$shapefiles
# Get basal area for spp & state combos
subset.tot.ba <- tot.ba[spp_code %in% id & state %in% regions]
# Get total basal area for selected region
sum.tot.ba <- subset.tot.ba[, .(tot_ba = sum(tot_ba)), by = spp_code][, state := "Total"]
# Recombine datatable
subset.tot.ba <-rbindlist(
list(subset.tot.ba, sum.tot.ba),
use.names = T,
fill = T,
idcol = F
)
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_colour_manual(labels = input$bar_names)
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_colour_manual(labels = c("Quercus alba", "Quercus rubra"))
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_colour_manual(labels = c("Quercus alba", "Quercus rubra"),
name = "Species")
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_fill_manual(labels = c("Quercus alba", "Quercus rubra"),
name = "Species")
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_fill_discrete(labels = c("Quercus alba", "Quercus rubra"),
name = "Species")
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_fill_discrete(labels = sci.name,
name = "Species")
# Percent proportion bar chart
ggplot(subset.tot.ba, aes(x = state, y = tot_ba, fill = spp_code)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent_format()) +
theme_bw() +
labs(x = "States", y = "Percentage of Total Basal Area in State") +
scale_fill_discrete(labels = sci.name,
name = "Species")
View(db)
input$scientific.name <- c(input$scientific.name, "Quercus ellipsoidalis")
runApp()
runApp()
runApp()
db <- fread("data/summary_table_all.csv")
tot.ba.file.path <- list.files(path = "./data/", pattern = "states_tot_ba.csv", full.names = T) # get full file names
tot.ba.list <- lapply(tot.ba.file.path, read.csv)
ba.list.id <- tot.ba.file.path %>% # extract trial numbers with this pipeline
basename() %>%
strsplit(split = "st")
ba.list.id <- unlist(ba.list.id)[c(T, F)]
names(tot.ba.list) <- list.id
tot.ba <- rbindlist(tot.ba.list)
names(tot.ba) <- c("X", "spp_code", "state", "tot_ba")
usa <- readOGR("data/shapefiles", "states")
usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
states <- sort(as.character(unique(usa$STATE_NAME)))
states <- c(states, "Northeast", "Mid-Atlantic", "Midwest", "Southeast",
"Southwest", "Mountain West", "Pacific West")
tot.ba.list <- lapply(tot.ba.file.path, read.csv)
tot.ba
write.csv(tot.ba, "basal_area_summary.csv")
tot.ba <- fread("data/basal_area_summary.csv")
names(tot.ba) <- c("X", "spp_code", "state", "tot_ba")
names(tot.ba) <- c("spp_code", "state", "tot_ba")
tot.ba
# List of raster names (for local use)
fullpath <- list.files(path = "raster.files/", pattern = ".img", full.names = T) # get full file names
full.path
fullpath
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Get scientific & common names for select spp
sci.name <- db$scientific_name[db$spp_code %in% id]
com.name <- db$common[db$spp_code %in% id]
# Get region for entered states
regions <- input$shapefiles
?gplot
??gplot
library(rasterVis)
install.packages(rasterVis)
install.packages("rasterVis")
?gplot
library(ggthemes)
install.packages("ggthemes")
?gplot
library(raster)
?gplot
library(rgdal)
?gplot
library(ggplot2)
?gplo
?gplot
library(viridis)
?gplot
PlotUSA <- function(raster) {
plot(raster)
plot(contig.usa, add = T)
}
usa <- readOGR("data/shapefiles", "states") # get usa shapefile
white.oak <- raster("data/s802.img")
red.oak <- raster("data/s833.img")
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
white.oak <- raster("raster.files/s802.img")
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
usa <- readOGR("data/shapefiles", "states") # get usa shapefile
usa <- spTransform(usa, CRS(proj4string(white.oak))) # transform shapefile to project with raster
contig.usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
wisconsin <- subset(usa, STATE_NAME == "Wisconsin")
mn.wi <- subset(usa, STATE_NAME == "Wisconsin" | STATE_NAME == "Minnesota")
states <- as.character(unique(contig.usa$STATE_NAME))
arizona <- subset(contig.usa, STATE_NAME == "Arizona")
#### See raster info
white.oak
### Plot with g(g)plot
# Default number of pixels for gplot is 50,000. Default for plot is 500,000.
# They take the same amount of time to plot at 50,000
# At 100,000 and 200,000 pixels they're essentially the same still.
# At 5,000,000 pixels, gplot was about 2 seconds faster.
# And it doesn't like to plot 200,000,000 pixels.
system.time(plot <- gplot(x = white.oak, maxpixels = 2000) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = gg.contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black"))
plot <- gplot(x = white.oak) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = gg.contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
plot <- ggplot(x = white.oak) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = gg.contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
### Make the usa shapefile plotable by ggplot
usa@data$id <- rownames(usa@data)
ggusa <- fortify(usa, region = "id")
ggusa <- merge(ggusa, usa@data, by = "id")
# Same but for contiguous usa
contig.usa@data$id <- rownames(contig.usa@data)
ggusa <- fortify(usa, region = "id")
library(plyr)
library(doParallel)
library(raster)
library(rgdal)
library(ggplot2)
library(viridis)
library(rasterVis)
library(ggthemes)
### Make the usa shapefile plotable by ggplot
usa@data$id <- rownames(usa@data)
ggusa <- fortify(usa, region = "id")
library(maptools)
install.packages("maptools")
library(maptools)
### Make the usa shapefile plotable by ggplot
usa@data$id <- rownames(usa@data)
ggusa <- fortify(usa, region = "id")
ggusa <- merge(ggusa, usa@data, by = "id")
ggusa <- fortify(usa, region = "id")
ggusa <- merge(ggusa, usa@data, by = "id")
?gplot
plot <- gplot(x = white.oak) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
plot + scale_fill_gradientn(colors = c("white", terrain.colors(5), "black")) + theme_map()
plot + scale_fill_gradientn(colors = c("white", terrain.colors(5), "orange")) + theme_map()
plot + scale_fill_gradientn(colors = c("white", terrain.colors(5))) + theme_map()
plot + scale_fill_gradientn(colors = c("white", terrain.colors(5)),
name = "Basal Area") +
theme_map()
plot <- gplot(x = white.oak, maxpixels = 100,000) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
plot + scale_fill_gradientn(colors = c("white", terrain.colors(5)),
name = "Basal Area") +
theme_map()
plot <- gplot(x = white.oak, maxpixels = 100000) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
plot +
scale_fill_gradientn(colors = c("white", terrain.colors(5)),
name = "Basal Area") +
theme_map()
plot <- gplot(x = white.oak, maxpixels = 200000) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
plot +
scale_fill_gradientn(colors = c("white", terrain.colors(5)),
name = "Basal Area") +
theme_map()
plot <- gplot(x = white.oak, maxpixels = 2000) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(data = contig.usa, aes(x = long, y = lat, group = group),
fill = NA, color = "black")
plot +
scale_fill_gradientn(colors = c("white", terrain.colors(5)),
name = "Basal Area") +
theme_map()
plot +
scale_fill_gradientn(colors = c("white", terrain.colors(7)),
name = "Basal Area") +
theme_map()
plot +
scale_fill_gradientn(colors = c("white", terrain.colors(2)),
name = "Basal Area") +
theme_map()
tot.ba
db
?merge
test <- merge(db, tot.ba, by = spp_code)
test <- merge(db, tot.ba, by = "spp_code")
test
head(test)
test
head(test)
test[, -2]
test<-test[, -2]
test
test <- test[, -6]
test
write.csv(test, "basal_area_summary.csv")
# HW 7
library(maps)
library(mapdata)
library(ggplot2)
library(dplyr)
library(data.table)
library(cowplot)
map("state")
incidence <- read.table("homework/cancer_incidence.txt", sep = "\t", header = T)
incidence$region <- tolower(incidence$Area)
incidence <- read.table("cancer_incidence.txt", sep = "\t", header = T)
# for plotting overlay
drive_download(paste0(id, ".img"))
library(raster)
library(rgeos)
library(rgdal)
library(ggplot2)
library(googledrive)
library(shiny)
library(data.table)
library(scales)
library(rasterVis)
library(viridis)
# for plotting overlay
drive_download(paste0(id, ".img"))
input <- NA
input$scientific.name <- "Quercus rubra"
# Get ID code for each spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Global data
db <- fread("data/summary_table_all.csv") # db with name info
# Basal area data
tot.ba <- fread("data/basal_area_summary.csv")
# State shapefiles
usa <- readOGR("data/shapefiles", "states")
usa <- subset(usa, STATE_NAME != "Hawaii" & STATE_NAME != "Alaska") # contig. usa shapefile
indv.states <- sort(as.character(unique(usa$STATE_NAME)))
# conver shapefile to format usable by ggplot
CRS <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,-0,-0,-0,0 +units=m +no_defs"
usa <- spTransform(usa, CRS)
usa@data$id <- rownames(usa@data)
gg.usa <- fortify(usa, region = "id")
gg.usa <- merge(gg.usa, usa@data, by = "id")
states <- c("Contiguous USA", indv.states, "Northeast", "Mid-Atlantic", "Midwest", "Southeast",
"Southwest", "Mountain West", "Pacific West")
# Get ID code for each spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Get scientific & common names for select spp
sci.name <- db$scientific_name[db$spp_code %in% id]
com.name <- db$common[db$spp_code %in% id]
input$shapefiles <- "Contiguous USA"
# for plotting overlay
drive_download(paste0(id, ".img"))
drive_rm(s833)
?drive_download
# for plotting overlay
drive_download(paste0(id, ".img"), path = "test/")
# for plotting overlay
drive_download(paste0(id, ".img"), path = "test")
# for plotting overlay
drive_download(paste0(id, ".img"), path = "test\")
# for plotting overlay
drive_download(paste0(id, ".img"), path = "/test/")
# for plotting overlay
drive_download(paste0(id, ".img"), path = "~/test/")
# for plotting overlay
drive_download(paste0(id, ".img"), path = "test/")
# for plotting overlay
drive_download(paste0(id, ".img"), path = paste0("test/", id, ".img"))
?drive_rm
input$scientific.name <- c("Quercus alba", "Quercus rubra")
# Get ID code for each spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Get scientific & common names for select spp
sci.name <- db$scientific_name[db$spp_code %in% id]
com.name <- db$common[db$spp_code %in% id]
# Get region for entered states
regions <- input$shapefiles
# for plotting overlay
drive_download(paste0(id, ".img"), path = paste0("test/", id, ".img"))
?sapply
# for plotting overlay
sapply(id, function(x) {
drive_download(paste0(x, ".img"), path = paste0("test/", id, ".img"))
})
# for plotting overlay
sapply(id, function(x) {
drive_download(paste0(x, ".img"), path = paste0("test/", x, ".img"))
})
paths <- paste0("test/", id, ".img")
paths
spp.raster <- reclassify(sum(stack(paths)), c(-0.001, 0.001, NA))
runApp()
id <- s111
id <- "s111"
if (length(id) > 1) {
# For plotting more than 1 spp
if (input$dist.options == "overlay") {
# for plotting overlay
sapply(id, function(x) {
drive_download(paste0(x, ".img"), path = paste0("rasters/", x, ".img"))
})
paths <- paste0("rasters/", id, ".img")
spp.raster <- reclassify(sum(stack(paths)), c(-0.001, 0.001, NA))
} else {
#for plotting co-occurence
paths <- paste0("rasters/", id, ".img")
paths <- lapply(paths, raster)
paths <- lapply(paths, reclassify, c(-0.001, 0.001, NA))
spp.raster <- sum(stack(paths))
} # end multiple spp chunk
} else { # If only 1 species selected
spp.raster <- reclassify(raster(paste0("rasters/", id, ".img")), c(-0.001, 0.001, NA))
}
runApp()
# for plotting overlay
paths <- paste0("rasters/", id, ".img")
paths
ls(rasters)
ls("rasters/")
list.files("rasters/")
paths %in% list.files("rasters/")
paths
id <- c("s12", "s111")
# for plotting overlay
paths <- paste0("rasters/", id, ".img")
paths
paths %in% list.files("rasters/")
paste0(id, ".img") %in% list.files("rasters/")
any(paste0(id, ".img") %in% list.files("rasters/"))
downloads <- id[paste0(id, ".img") %in% list.files("rasters/") == F]
runApp()
runApp()
input$scientific.name <- c("Abies fraseri", "Abies lasiocarpa")
# Get ID code for each spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Get scientific & common names for select spp
sci.name <- db$scientific_name[db$spp_code %in% id]
com.name <- db$common[db$spp_code %in% id]
# for plotting overlay
paths <- paste0("rasters/", id, ".img") # get paths
id
View(db)
spp.raster <- reclassify(raster(paste0("rasters/", "s16", ".img")), c(-0.001, 0.001, NA))
# If USA is selected, plot whole US
# Make plot
# Need to reclassify 0s to NA so plot looks okay. Doesn't affect pixel values
plot <-
gplot(x = spp.raster,
maxpixels = input$pixels) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(
data = gg.usa,
aes(x = long, y = lat, group = group),
fill = "transparent",
color = "black") +
ggtitle(paste("Basal area per pixel of", input$common.name)) +
theme(plot.title = element_text(hjust = 0.5, vjust = -0.5))
input$pixels <- 30000
# If USA is selected, plot whole US
# Make plot
# Need to reclassify 0s to NA so plot looks okay. Doesn't affect pixel values
plot <-
gplot(x = spp.raster,
maxpixels = input$pixels) +
geom_raster(aes(x = x, y = y, fill = value)) +
geom_polygon(
data = gg.usa,
aes(x = long, y = lat, group = group),
fill = "transparent",
color = "black") +
ggtitle(paste("Basal area per pixel of", input$common.name)) +
theme(plot.title = element_text(hjust = 0.5, vjust = -0.5))
# two color gradient
map() +
scale_fill_gradient(low = input$low,
high = input$high,
na.value = "white",
name = "Average Basal Area \n per Acre") +
theme_void()
plot  scale_fill_gradient(low = input$low,
high = input$high,
na.value = "white",
name = "Average Basal Area \n per Acre") +
theme_void()
plot +
scale_fill_gradient(low = input$low,
high = input$high,
na.value = "white",
name = "Average Basal Area \n per Acre") +
theme_void()
input$low <- "blue"
input$high <- "orange"
plot +
scale_fill_gradient(low = input$low,
high = input$high,
na.value = "white",
name = "Average Basal Area \n per Acre") +
theme_void()
runApp()
View(db)
View(tot.ba)
View(tot.ba)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
drive_api_key()
drive_auth(oauth_token = ".httr-oauth")
drive_auth()
drive_auth_config()
drive_auth_config(active = FALSE)
runApp()
drive_autho()
drive_auth()
v <- drive_auth()
v
savedRDS(v, "shiny_app_token.rds")
??saveRDS
saveRDS
?saveRDS
saveRDS(v, "shiny_app_token.rds")
?drive_auth
v
drive_auth(oauth_token = "shiny_app_token.rds")
list.files()
runApp()
runApp()
runApp()
runApp()
runApp()
drive_auth()
runApp()
# Get ID code for each spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
input$scientific.name <- c("Quercus alba")
# Get ID code for each spp
id <- db$spp_code[db$scientific_name %in% input$scientific.name]
# Get scientific & common names for select spp
sci.name <- db$scientific_name[db$spp_code %in% id]
com.name <- db$common[db$spp_code %in% id]
# Get region for entered states
regions <- input$shapefiles
downloads <- id[paste0(id, ".img") %in% list.files() == F]
sapply(downloads, function(x) {
drive_download(paste0(x, ".img"), path = paste0(x, ".img"))
})
downloads <- id[paste0(id, ".img") %in% list.files() == F]
sapply(downloads, function(x) {
drive_download(paste0(x, ".img"), path = paste0(x, ".img"))
})
sapply(id, function(x) {
drive_download(paste0(x, ".img"), path = paste0(x, ".img"))
})
# for plotting overlay
paths <- paste0(id, ".img") # get paths
# sum rasters, then reclassify for plotting
spp.raster <- reclassify(sum(stack(paths)), c(-0.001, 0.001, NA))
